@page "/cryptocoins"
@attribute [StreamRendering]
@using BlazorApp1.Models;

<PageTitle>cryptocoins</PageTitle>

<h1>CryptoCoins</h1>

<p>
    Top CryptoCoins in the market, @if (coins == null || coins.Count == 0)
    {
    <p><em>Loading...</em></p>
    }
    else
        @coins.FirstOrDefault().CryptoName
 is currently the most valued cryptocoin with a whopping value of @if (coins == null || coins.Count == 0)
    {
    <p><em>Loading...</em></p>
    }
    else
        @coins.FirstOrDefault().Price
    </p>

@if (coins == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Symbol</th>
                <th>Name</th>                
                <th>Price (USD)</th>
                <th>Price (SEK) </th>                
                <th>Last Day Status </th>

            </tr>
        </thead>
        <tbody>

            @foreach (var coin in coins.OrderByDescending(coin => coin.Price))
            {
                number++;
                <tr>
                    <td>@number</td>
                    <td>@coin.Summary</td>
                    <td>@coin.CryptoName</td>                    
                    <td>@coin.Price</td>
                    <td>@coin.PriceSEK</td>
                    <td>@if (@coin.PercentChange > 0)
                        {
                            <span style="color: green;">@coin.PercentChange %</span>
                            <span style="color: green;">▲</span>
                        }
                        else if (coin.PercentChange < 0)
                        {
                            <span style="color: red;">@coin.PercentChange %</span>
                            <span style="color: red;">▼</span>
                        }
                        else
                        {
                            <span>@coin.PercentChange %</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table> 
}

@code {
    int number = 0;
    List<CryptoCoin> coins = new List<CryptoCoin>();

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering


        coins = await cryptoAPICall();
    }

    public class CryptoCoin
    {
        public string? CryptoName { get; set; }
        public float? Price { get; set; }
        public string? Summary { get; set; }
        public float? PriceSEK { get; set; }
        public float? PercentChange { get; set; }
        // public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }


    private async Task<List<CryptoCoin>> cryptoAPICall()
    {
        var limit = 1;
        var convert = "USD,SEK";
        var endpoint = new Uri($"https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest?convert={convert}"); // valde listings mest för test


        // endpoint.Query = queryString.ToString();

        string API_KEY = "63f9b42b-7067-41cf-803e-00025ed9b664"; // min egna api key har 10000 kostnadsfria calls per månad
        var client = new HttpClient();
        client.DefaultRequestHeaders.Add("X-CMC_PRO_API_KEY", API_KEY);
        client.DefaultRequestHeaders.Add("Accepts", "application/json");
        var result = client.GetAsync(endpoint).Result;
        var json = result.Content.ReadAsStringAsync().Result;

        var listings = System.Text.Json.JsonSerializer.Deserialize<Listings>(json);

        List<CryptoCoin> cryptoCoin = new();

        foreach (var coin in listings.data)
        {
            float roundedPercentChange = (float)Math.Round(coin.quote.USD.percent_change_24h, 2);
            cryptoCoin.Add(new CryptoCoin
                {
                    Price = coin.quote.USD.price,
                    Summary = coin.symbol.ToUpper(),
                    CryptoName = coin.name.ToUpper(),
                    PriceSEK = coin.quote.SEK.price,
                    PercentChange = roundedPercentChange
                });
            //   var bitcoinValueSek = Convert.ToDecimal(bitcoinValueUsd) * 10; // får fram real bitcoin data i USD valuta.
        }

        return cryptoCoin;
    }
    }
